// proto/sso/sso.proto

// Версия ProtoBuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.4
// source: anime/anime.proto

//import "annotations.proto";

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *FilterRequest) Reset() {
	*x = FilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_anime_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRequest) ProtoMessage() {}

func (x *FilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anime_anime_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRequest.ProtoReflect.Descriptor instead.
func (*FilterRequest) Descriptor() ([]byte, []int) {
	return file_anime_anime_proto_rawDescGZIP(), []int{0}
}

func (x *FilterRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type FilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *FilterResponse) Reset() {
	*x = FilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_anime_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterResponse) ProtoMessage() {}

func (x *FilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anime_anime_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterResponse.ProtoReflect.Descriptor instead.
func (*FilterResponse) Descriptor() ([]byte, []int) {
	return file_anime_anime_proto_rawDescGZIP(), []int{1}
}

func (x *FilterResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilterResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KinopoiskId     uint64  `protobuf:"varint,2,opt,name=kinopoisk_id,json=kinopoiskId,proto3" json:"kinopoisk_id,omitempty"`
	ImdbId          uint64  `protobuf:"varint,3,opt,name=imdb_id,json=imdbId,proto3" json:"imdb_id,omitempty"`
	ShikimoriId     uint64  `protobuf:"varint,4,opt,name=shikimori_id,json=shikimoriId,proto3" json:"shikimori_id,omitempty"`
	UpdatedAt       string  `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt       string  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Quality         uint64  `protobuf:"varint,7,opt,name=quality,proto3" json:"quality,omitempty"`
	Title           string  `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	TitleEn         string  `protobuf:"bytes,9,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	OtherTitles     string  `protobuf:"bytes,10,opt,name=other_titles,json=otherTitles,proto3" json:"other_titles,omitempty"`
	OtherTitlesEn   string  `protobuf:"bytes,11,opt,name=other_titles_en,json=otherTitlesEn,proto3" json:"other_titles_en,omitempty"`
	AnimeLicensedBy string  `protobuf:"bytes,12,opt,name=anime_licensed_by,json=animeLicensedBy,proto3" json:"anime_licensed_by,omitempty"`
	AnimeKind       string  `protobuf:"bytes,13,opt,name=anime_kind,json=animeKind,proto3" json:"anime_kind,omitempty"`
	AnimeStatus     string  `protobuf:"bytes,14,opt,name=anime_status,json=animeStatus,proto3" json:"anime_status,omitempty"`
	Year            uint32  `protobuf:"varint,15,opt,name=year,proto3" json:"year,omitempty"`
	Tagline         string  `protobuf:"bytes,16,opt,name=tagline,proto3" json:"tagline,omitempty"`
	Description     string  `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	Lgbt            bool    `protobuf:"varint,18,opt,name=lgbt,proto3" json:"lgbt,omitempty"`
	Camrip          bool    `protobuf:"varint,19,opt,name=camrip,proto3" json:"camrip,omitempty"`
	WorldartLink    string  `protobuf:"bytes,20,opt,name=worldart_link,json=worldartLink,proto3" json:"worldart_link,omitempty"`
	PosterUrl       string  `protobuf:"bytes,21,opt,name=poster_url,json=posterUrl,proto3" json:"poster_url,omitempty"`
	Duration        uint32  `protobuf:"varint,22,opt,name=duration,proto3" json:"duration,omitempty"`
	KinopoiskRating float32 `protobuf:"fixed32,23,opt,name=kinopoisk_rating,json=kinopoiskRating,proto3" json:"kinopoisk_rating,omitempty"`
	KinopoiskVotes  uint32  `protobuf:"varint,24,opt,name=kinopoisk_votes,json=kinopoiskVotes,proto3" json:"kinopoisk_votes,omitempty"`
	ImdbRating      float32 `protobuf:"fixed32,25,opt,name=imdb_rating,json=imdbRating,proto3" json:"imdb_rating,omitempty"`
	ImdbVotes       uint32  `protobuf:"varint,26,opt,name=imdb_votes,json=imdbVotes,proto3" json:"imdb_votes,omitempty"`
	ShikimoriRating float32 `protobuf:"fixed32,27,opt,name=shikimori_rating,json=shikimoriRating,proto3" json:"shikimori_rating,omitempty"`
	ShikimoriVotes  uint32  `protobuf:"varint,28,opt,name=shikimori_votes,json=shikimoriVotes,proto3" json:"shikimori_votes,omitempty"`
	PremiereWorld   string  `protobuf:"bytes,29,opt,name=premiere_world,json=premiereWorld,proto3" json:"premiere_world,omitempty"`
	AiredAt         string  `protobuf:"bytes,30,opt,name=aired_at,json=airedAt,proto3" json:"aired_at,omitempty"`
	ReleasedAt      string  `protobuf:"bytes,31,opt,name=released_at,json=releasedAt,proto3" json:"released_at,omitempty"`
	NextEpisodeAt   string  `protobuf:"bytes,32,opt,name=next_episode_at,json=nextEpisodeAt,proto3" json:"next_episode_at,omitempty"`
	RatingMpaa      string  `protobuf:"bytes,33,opt,name=rating_mpaa,json=ratingMpaa,proto3" json:"rating_mpaa,omitempty"`
	MinimalAge      uint32  `protobuf:"varint,34,opt,name=minimal_age,json=minimalAge,proto3" json:"minimal_age,omitempty"`
	EpisodesTotal   uint32  `protobuf:"varint,35,opt,name=episodes_total,json=episodesTotal,proto3" json:"episodes_total,omitempty"`
	EpisodesAired   uint32  `protobuf:"varint,36,opt,name=episodes_aired,json=episodesAired,proto3" json:"episodes_aired,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_anime_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anime_anime_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_anime_anime_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRequest) GetKinopoiskId() uint64 {
	if x != nil {
		return x.KinopoiskId
	}
	return 0
}

func (x *CreateRequest) GetImdbId() uint64 {
	if x != nil {
		return x.ImdbId
	}
	return 0
}

func (x *CreateRequest) GetShikimoriId() uint64 {
	if x != nil {
		return x.ShikimoriId
	}
	return 0
}

func (x *CreateRequest) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *CreateRequest) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CreateRequest) GetQuality() uint64 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *CreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateRequest) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *CreateRequest) GetOtherTitles() string {
	if x != nil {
		return x.OtherTitles
	}
	return ""
}

func (x *CreateRequest) GetOtherTitlesEn() string {
	if x != nil {
		return x.OtherTitlesEn
	}
	return ""
}

func (x *CreateRequest) GetAnimeLicensedBy() string {
	if x != nil {
		return x.AnimeLicensedBy
	}
	return ""
}

func (x *CreateRequest) GetAnimeKind() string {
	if x != nil {
		return x.AnimeKind
	}
	return ""
}

func (x *CreateRequest) GetAnimeStatus() string {
	if x != nil {
		return x.AnimeStatus
	}
	return ""
}

func (x *CreateRequest) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *CreateRequest) GetTagline() string {
	if x != nil {
		return x.Tagline
	}
	return ""
}

func (x *CreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateRequest) GetLgbt() bool {
	if x != nil {
		return x.Lgbt
	}
	return false
}

func (x *CreateRequest) GetCamrip() bool {
	if x != nil {
		return x.Camrip
	}
	return false
}

func (x *CreateRequest) GetWorldartLink() string {
	if x != nil {
		return x.WorldartLink
	}
	return ""
}

func (x *CreateRequest) GetPosterUrl() string {
	if x != nil {
		return x.PosterUrl
	}
	return ""
}

func (x *CreateRequest) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateRequest) GetKinopoiskRating() float32 {
	if x != nil {
		return x.KinopoiskRating
	}
	return 0
}

func (x *CreateRequest) GetKinopoiskVotes() uint32 {
	if x != nil {
		return x.KinopoiskVotes
	}
	return 0
}

func (x *CreateRequest) GetImdbRating() float32 {
	if x != nil {
		return x.ImdbRating
	}
	return 0
}

func (x *CreateRequest) GetImdbVotes() uint32 {
	if x != nil {
		return x.ImdbVotes
	}
	return 0
}

func (x *CreateRequest) GetShikimoriRating() float32 {
	if x != nil {
		return x.ShikimoriRating
	}
	return 0
}

func (x *CreateRequest) GetShikimoriVotes() uint32 {
	if x != nil {
		return x.ShikimoriVotes
	}
	return 0
}

func (x *CreateRequest) GetPremiereWorld() string {
	if x != nil {
		return x.PremiereWorld
	}
	return ""
}

func (x *CreateRequest) GetAiredAt() string {
	if x != nil {
		return x.AiredAt
	}
	return ""
}

func (x *CreateRequest) GetReleasedAt() string {
	if x != nil {
		return x.ReleasedAt
	}
	return ""
}

func (x *CreateRequest) GetNextEpisodeAt() string {
	if x != nil {
		return x.NextEpisodeAt
	}
	return ""
}

func (x *CreateRequest) GetRatingMpaa() string {
	if x != nil {
		return x.RatingMpaa
	}
	return ""
}

func (x *CreateRequest) GetMinimalAge() uint32 {
	if x != nil {
		return x.MinimalAge
	}
	return 0
}

func (x *CreateRequest) GetEpisodesTotal() uint32 {
	if x != nil {
		return x.EpisodesTotal
	}
	return 0
}

func (x *CreateRequest) GetEpisodesAired() uint32 {
	if x != nil {
		return x.EpisodesAired
	}
	return 0
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	KinopoiskId     uint64  `protobuf:"varint,2,opt,name=kinopoisk_id,json=kinopoiskId,proto3" json:"kinopoisk_id,omitempty"`
	ImdbId          uint64  `protobuf:"varint,3,opt,name=imdb_id,json=imdbId,proto3" json:"imdb_id,omitempty"`
	ShikimoriId     uint64  `protobuf:"varint,4,opt,name=shikimori_id,json=shikimoriId,proto3" json:"shikimori_id,omitempty"`
	UpdatedAt       string  `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt       string  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Quality         uint64  `protobuf:"varint,7,opt,name=quality,proto3" json:"quality,omitempty"`
	Title           string  `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	TitleEn         string  `protobuf:"bytes,9,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	OtherTitles     string  `protobuf:"bytes,10,opt,name=other_titles,json=otherTitles,proto3" json:"other_titles,omitempty"`
	OtherTitlesEn   string  `protobuf:"bytes,11,opt,name=other_titles_en,json=otherTitlesEn,proto3" json:"other_titles_en,omitempty"`
	AnimeLicensedBy string  `protobuf:"bytes,12,opt,name=anime_licensed_by,json=animeLicensedBy,proto3" json:"anime_licensed_by,omitempty"`
	AnimeKind       string  `protobuf:"bytes,13,opt,name=anime_kind,json=animeKind,proto3" json:"anime_kind,omitempty"`
	AnimeStatus     string  `protobuf:"bytes,14,opt,name=anime_status,json=animeStatus,proto3" json:"anime_status,omitempty"`
	Year            uint32  `protobuf:"varint,15,opt,name=year,proto3" json:"year,omitempty"`
	Tagline         string  `protobuf:"bytes,16,opt,name=tagline,proto3" json:"tagline,omitempty"`
	Description     string  `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	Lgbt            float32 `protobuf:"fixed32,18,opt,name=lgbt,proto3" json:"lgbt,omitempty"`
	Camrip          bool    `protobuf:"varint,19,opt,name=camrip,proto3" json:"camrip,omitempty"`
	WorldartLink    string  `protobuf:"bytes,20,opt,name=worldart_link,json=worldartLink,proto3" json:"worldart_link,omitempty"`
	PosterUrl       string  `protobuf:"bytes,21,opt,name=poster_url,json=posterUrl,proto3" json:"poster_url,omitempty"`
	Duration        uint32  `protobuf:"varint,22,opt,name=duration,proto3" json:"duration,omitempty"`
	KinopoiskRating float32 `protobuf:"fixed32,23,opt,name=kinopoisk_rating,json=kinopoiskRating,proto3" json:"kinopoisk_rating,omitempty"`
	KinopoiskVotes  uint32  `protobuf:"varint,24,opt,name=kinopoisk_votes,json=kinopoiskVotes,proto3" json:"kinopoisk_votes,omitempty"`
	ImdbRating      float32 `protobuf:"fixed32,25,opt,name=imdb_rating,json=imdbRating,proto3" json:"imdb_rating,omitempty"`
	ImdbVotes       uint32  `protobuf:"varint,26,opt,name=imdb_votes,json=imdbVotes,proto3" json:"imdb_votes,omitempty"`
	ShikimoriRating float32 `protobuf:"fixed32,27,opt,name=shikimori_rating,json=shikimoriRating,proto3" json:"shikimori_rating,omitempty"`
	ShikimoriVotes  uint32  `protobuf:"varint,28,opt,name=shikimori_votes,json=shikimoriVotes,proto3" json:"shikimori_votes,omitempty"`
	PremiereWorld   string  `protobuf:"bytes,29,opt,name=premiere_world,json=premiereWorld,proto3" json:"premiere_world,omitempty"`
	AiredAt         string  `protobuf:"bytes,30,opt,name=aired_at,json=airedAt,proto3" json:"aired_at,omitempty"`
	ReleasedAt      string  `protobuf:"bytes,31,opt,name=released_at,json=releasedAt,proto3" json:"released_at,omitempty"`
	NextEpisodeAt   string  `protobuf:"bytes,32,opt,name=next_episode_at,json=nextEpisodeAt,proto3" json:"next_episode_at,omitempty"`
	RatingMpaa      string  `protobuf:"bytes,33,opt,name=rating_mpaa,json=ratingMpaa,proto3" json:"rating_mpaa,omitempty"`
	MinimalAge      uint32  `protobuf:"varint,34,opt,name=minimal_age,json=minimalAge,proto3" json:"minimal_age,omitempty"`
	EpisodesTotal   uint32  `protobuf:"varint,35,opt,name=episodes_total,json=episodesTotal,proto3" json:"episodes_total,omitempty"`
	EpisodesAired   uint32  `protobuf:"varint,36,opt,name=episodes_aired,json=episodesAired,proto3" json:"episodes_aired,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_anime_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anime_anime_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_anime_anime_proto_rawDescGZIP(), []int{3}
}

func (x *CreateResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateResponse) GetKinopoiskId() uint64 {
	if x != nil {
		return x.KinopoiskId
	}
	return 0
}

func (x *CreateResponse) GetImdbId() uint64 {
	if x != nil {
		return x.ImdbId
	}
	return 0
}

func (x *CreateResponse) GetShikimoriId() uint64 {
	if x != nil {
		return x.ShikimoriId
	}
	return 0
}

func (x *CreateResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *CreateResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CreateResponse) GetQuality() uint64 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *CreateResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateResponse) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *CreateResponse) GetOtherTitles() string {
	if x != nil {
		return x.OtherTitles
	}
	return ""
}

func (x *CreateResponse) GetOtherTitlesEn() string {
	if x != nil {
		return x.OtherTitlesEn
	}
	return ""
}

func (x *CreateResponse) GetAnimeLicensedBy() string {
	if x != nil {
		return x.AnimeLicensedBy
	}
	return ""
}

func (x *CreateResponse) GetAnimeKind() string {
	if x != nil {
		return x.AnimeKind
	}
	return ""
}

func (x *CreateResponse) GetAnimeStatus() string {
	if x != nil {
		return x.AnimeStatus
	}
	return ""
}

func (x *CreateResponse) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *CreateResponse) GetTagline() string {
	if x != nil {
		return x.Tagline
	}
	return ""
}

func (x *CreateResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateResponse) GetLgbt() float32 {
	if x != nil {
		return x.Lgbt
	}
	return 0
}

func (x *CreateResponse) GetCamrip() bool {
	if x != nil {
		return x.Camrip
	}
	return false
}

func (x *CreateResponse) GetWorldartLink() string {
	if x != nil {
		return x.WorldartLink
	}
	return ""
}

func (x *CreateResponse) GetPosterUrl() string {
	if x != nil {
		return x.PosterUrl
	}
	return ""
}

func (x *CreateResponse) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateResponse) GetKinopoiskRating() float32 {
	if x != nil {
		return x.KinopoiskRating
	}
	return 0
}

func (x *CreateResponse) GetKinopoiskVotes() uint32 {
	if x != nil {
		return x.KinopoiskVotes
	}
	return 0
}

func (x *CreateResponse) GetImdbRating() float32 {
	if x != nil {
		return x.ImdbRating
	}
	return 0
}

func (x *CreateResponse) GetImdbVotes() uint32 {
	if x != nil {
		return x.ImdbVotes
	}
	return 0
}

func (x *CreateResponse) GetShikimoriRating() float32 {
	if x != nil {
		return x.ShikimoriRating
	}
	return 0
}

func (x *CreateResponse) GetShikimoriVotes() uint32 {
	if x != nil {
		return x.ShikimoriVotes
	}
	return 0
}

func (x *CreateResponse) GetPremiereWorld() string {
	if x != nil {
		return x.PremiereWorld
	}
	return ""
}

func (x *CreateResponse) GetAiredAt() string {
	if x != nil {
		return x.AiredAt
	}
	return ""
}

func (x *CreateResponse) GetReleasedAt() string {
	if x != nil {
		return x.ReleasedAt
	}
	return ""
}

func (x *CreateResponse) GetNextEpisodeAt() string {
	if x != nil {
		return x.NextEpisodeAt
	}
	return ""
}

func (x *CreateResponse) GetRatingMpaa() string {
	if x != nil {
		return x.RatingMpaa
	}
	return ""
}

func (x *CreateResponse) GetMinimalAge() uint32 {
	if x != nil {
		return x.MinimalAge
	}
	return 0
}

func (x *CreateResponse) GetEpisodesTotal() uint32 {
	if x != nil {
		return x.EpisodesTotal
	}
	return 0
}

func (x *CreateResponse) GetEpisodesAired() uint32 {
	if x != nil {
		return x.EpisodesAired
	}
	return 0
}

type GetByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetByIdRequest) Reset() {
	*x = GetByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_anime_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIdRequest) ProtoMessage() {}

func (x *GetByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anime_anime_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIdRequest.ProtoReflect.Descriptor instead.
func (*GetByIdRequest) Descriptor() ([]byte, []int) {
	return file_anime_anime_proto_rawDescGZIP(), []int{4}
}

func (x *GetByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *GetByIdResponse) Reset() {
	*x = GetByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anime_anime_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIdResponse) ProtoMessage() {}

func (x *GetByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anime_anime_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIdResponse.ProtoReflect.Descriptor instead.
func (*GetByIdResponse) Descriptor() ([]byte, []int) {
	return file_anime_anime_proto_rawDescGZIP(), []int{5}
}

func (x *GetByIdResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetByIdResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_anime_anime_proto protoreflect.FileDescriptor

var file_anime_anime_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x25, 0x0a, 0x0d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x36, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x8f, 0x09, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x69,
	0x6e, 0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6b, 0x69, 0x6e, 0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x6d, 0x64, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x69, 0x6d, 0x64, 0x62, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x6d,
	0x6f, 0x72, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x68,
	0x69, 0x6b, 0x69, 0x6d, 0x6f, 0x72, 0x69, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x45, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x67, 0x62, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x67, 0x62, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x72, 0x69, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x63, 0x61, 0x6d, 0x72, 0x69, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6b, 0x69, 0x6e, 0x6f, 0x70,
	0x6f, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x6b, 0x69, 0x6e, 0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x69, 0x6e, 0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6b, 0x69, 0x6e,
	0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6d, 0x64, 0x62, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x69, 0x6d, 0x64, 0x62, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6d, 0x64, 0x62, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x69, 0x6d, 0x64, 0x62, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x68, 0x69, 0x6b, 0x69, 0x6d, 0x6f, 0x72, 0x69, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x6d, 0x6f, 0x72, 0x69,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x6d,
	0x6f, 0x72, 0x69, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x6d, 0x6f, 0x72, 0x69, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72,
	0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x70, 0x61, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x70, 0x61, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x69, 0x72, 0x65, 0x64, 0x22, 0xa0, 0x09, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6b, 0x69, 0x6e, 0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6b, 0x69, 0x6e, 0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x64, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x69, 0x6d, 0x64, 0x62, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x69,
	0x6b, 0x69, 0x6d, 0x6f, 0x72, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x6d, 0x6f, 0x72, 0x69, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x67, 0x62, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x67,
	0x62, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x72, 0x69, 0x70, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x72, 0x69, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6b, 0x69,
	0x6e, 0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6b, 0x69, 0x6e, 0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x69, 0x6e, 0x6f, 0x70, 0x6f, 0x69,
	0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6b, 0x69, 0x6e, 0x6f, 0x70, 0x6f, 0x69, 0x73, 0x6b, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6d, 0x64, 0x62, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x69, 0x6d, 0x64, 0x62, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x64, 0x62, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6d, 0x64, 0x62, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x6d, 0x6f, 0x72, 0x69, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x6d,
	0x6f, 0x72, 0x69, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x69,
	0x6b, 0x69, 0x6d, 0x6f, 0x72, 0x69, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x6b, 0x69, 0x6d, 0x6f, 0x72, 0x69, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x6d,
	0x69, 0x65, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x70, 0x61, 0x61, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x70, 0x61, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x73, 0x5f, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x32, 0xa9, 0x01, 0x0a, 0x05, 0x41, 0x6e, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anime_anime_proto_rawDescOnce sync.Once
	file_anime_anime_proto_rawDescData = file_anime_anime_proto_rawDesc
)

func file_anime_anime_proto_rawDescGZIP() []byte {
	file_anime_anime_proto_rawDescOnce.Do(func() {
		file_anime_anime_proto_rawDescData = protoimpl.X.CompressGZIP(file_anime_anime_proto_rawDescData)
	})
	return file_anime_anime_proto_rawDescData
}

var file_anime_anime_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_anime_anime_proto_goTypes = []interface{}{
	(*FilterRequest)(nil),   // 0: auth.FilterRequest
	(*FilterResponse)(nil),  // 1: auth.FilterResponse
	(*CreateRequest)(nil),   // 2: auth.CreateRequest
	(*CreateResponse)(nil),  // 3: auth.CreateResponse
	(*GetByIdRequest)(nil),  // 4: auth.GetByIdRequest
	(*GetByIdResponse)(nil), // 5: auth.GetByIdResponse
}
var file_anime_anime_proto_depIdxs = []int32{
	0, // 0: auth.Anime.Filter:input_type -> auth.FilterRequest
	4, // 1: auth.Anime.GetById:input_type -> auth.GetByIdRequest
	2, // 2: auth.Anime.Create:input_type -> auth.CreateRequest
	1, // 3: auth.Anime.Filter:output_type -> auth.FilterResponse
	5, // 4: auth.Anime.GetById:output_type -> auth.GetByIdResponse
	3, // 5: auth.Anime.Create:output_type -> auth.CreateResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_anime_anime_proto_init() }
func file_anime_anime_proto_init() {
	if File_anime_anime_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_anime_anime_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anime_anime_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anime_anime_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anime_anime_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anime_anime_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anime_anime_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anime_anime_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_anime_anime_proto_goTypes,
		DependencyIndexes: file_anime_anime_proto_depIdxs,
		MessageInfos:      file_anime_anime_proto_msgTypes,
	}.Build()
	File_anime_anime_proto = out.File
	file_anime_anime_proto_rawDesc = nil
	file_anime_anime_proto_goTypes = nil
	file_anime_anime_proto_depIdxs = nil
}
